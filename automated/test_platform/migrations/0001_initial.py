# Generated by Django 2.1.1 on 2018-10-10 03:16

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nid', models.AutoField(primary_key=True, serialize=False)),
                ('telephone', models.CharField(max_length=11, null=True, unique=True)),
                ('avatar', models.FileField(default='/avatars/default.png', upload_to='avatars/')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Apis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('apiname', models.CharField(max_length=128, verbose_name='接口名称')),
                ('apiurl', models.CharField(max_length=256, verbose_name='URL地址')),
                ('apiparamvalue', models.CharField(max_length=1024, verbose_name='请求参数和值')),
                ('apimethod', models.CharField(choices=[('get', 'get'), ('post', 'post'), ('put', 'put'), ('delete', 'delete'), ('patch', 'patch')], default='get', max_length=64, null=True, verbose_name='请求方法')),
                ('apiresult', models.CharField(max_length=256, verbose_name='预期结果')),
                ('apistatus', models.BooleanField(verbose_name='是否通过')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
            ],
        ),
        migrations.CreateModel(
            name='Apistep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('apitestname', models.CharField(max_length=128, verbose_name='接口名称')),
                ('apiurl', models.CharField(max_length=256, verbose_name='URL地址')),
                ('apiparamvalue', models.CharField(max_length=1024, verbose_name='请求参数和值')),
                ('apimethod', models.CharField(choices=[('get', 'get'), ('post', 'post'), ('put', 'put'), ('delete', 'delete'), ('patch', 'patch')], default='get', max_length=64, null=True, verbose_name='请求方法')),
                ('apiresult', models.CharField(max_length=256, verbose_name='预期结果')),
                ('apistatus', models.BooleanField(verbose_name='是否通过')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
            ],
        ),
        migrations.CreateModel(
            name='Apitest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('apitestname', models.CharField(max_length=64, verbose_name='流程接口名称')),
                ('apitestdesc', models.CharField(max_length=64, null=True, verbose_name='描述')),
                ('apitester', models.CharField(max_length=64, verbose_name='测试负责人')),
                ('apitestresult', models.BooleanField(verbose_name='测试结果')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '流程场景接口',
            },
        ),
        migrations.CreateModel(
            name='Appcase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appcasename', models.CharField(max_length=256, verbose_name='用例名称')),
                ('apptestresult', models.BooleanField(verbose_name='测试结果')),
                ('apptester', models.CharField(max_length=64, verbose_name='测试负责人')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': 'app测试用例',
                'verbose_name_plural': 'app测试用例',
            },
        ),
        migrations.CreateModel(
            name='Appcasestep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appcasename', models.CharField(max_length=256, verbose_name='测试用例标题')),
                ('apptestsetp', models.CharField(max_length=256, verbose_name='测试步骤')),
                ('apptestobjname', models.CharField(max_length=256, verbose_name='测试对象名称描述')),
                ('appfindmethod', models.CharField(max_length=256, verbose_name='定位方式')),
                ('appevelement', models.CharField(max_length=512, verbose_name='控件元素')),
                ('apptestdata', models.CharField(max_length=512, verbose_name='测试数据')),
                ('appassertdata', models.CharField(max_length=128, verbose_name='验证数据')),
                ('apptestresult', models.BooleanField(max_length=32, verbose_name='测试结果')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
                ('appcase', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='test_platform.Appcase')),
            ],
        ),
        migrations.CreateModel(
            name='Modules',
            fields=[
                ('mid', models.AutoField(primary_key=True, serialize=False)),
                ('Modules_name', models.CharField(max_length=20, verbose_name='模块名称')),
                ('Testers', models.CharField(max_length=100, verbose_name='测试人员')),
                ('Developer', models.CharField(max_length=100)),
                ('status', models.BooleanField()),
                ('Modules_desc', models.CharField(max_length=200, verbose_name='模块描述')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('pid', models.AutoField(primary_key=True, serialize=False)),
                ('projectname', models.CharField(max_length=64, verbose_name='项目名称')),
                ('projectdesc', models.CharField(max_length=256, verbose_name='项目描述')),
                ('Testers', models.CharField(max_length=256, verbose_name='测试负责人')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '项目管理',
                'verbose_name_plural': '项目管理',
            },
        ),
        migrations.CreateModel(
            name='Webcase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('webcasename', models.CharField(max_length=256, verbose_name='用例名称')),
                ('webtestresult', models.BooleanField(verbose_name='测试结果')),
                ('webtester', models.CharField(max_length=64, verbose_name='测试负责人')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
                ('Modules', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='test_platform.Modules')),
            ],
            options={
                'verbose_name': 'web测试用例',
                'verbose_name_plural': 'web测试用例',
            },
        ),
        migrations.CreateModel(
            name='Webcasestep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('webcasename', models.CharField(max_length=256, verbose_name='测试用例标题')),
                ('webtestsetp', models.CharField(max_length=256, verbose_name='测试步骤')),
                ('webtestobjname', models.CharField(max_length=256, verbose_name='测试对象名称描述')),
                ('webfindmethod', models.CharField(max_length=256, verbose_name='定位方式')),
                ('webevelement', models.CharField(max_length=512, verbose_name='控件元素')),
                ('webtestdata', models.CharField(max_length=512, verbose_name='测试数据')),
                ('webassertdata', models.CharField(max_length=128, verbose_name='验证数据')),
                ('webtestresult', models.BooleanField(max_length=32, verbose_name='测试结果')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='创建时间')),
                ('webcase', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='test_platform.Webcase')),
            ],
        ),
        migrations.AddField(
            model_name='modules',
            name='Project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='test_platform.Project'),
        ),
        migrations.AddField(
            model_name='appcase',
            name='Modules',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='test_platform.Modules'),
        ),
        migrations.AddField(
            model_name='apitest',
            name='Modules',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='test_platform.Modules'),
        ),
        migrations.AddField(
            model_name='apistep',
            name='apitest',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='test_platform.Apitest'),
        ),
        migrations.AddField(
            model_name='apis',
            name='Modules',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='test_platform.Modules'),
        ),
    ]
